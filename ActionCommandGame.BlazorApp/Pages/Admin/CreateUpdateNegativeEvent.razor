  @page "/CreateNegEvent"
  @page "/UpdateNegEvent/{Id:int}"
  @inject NavigationManager NavigationManager
  @inject INegativeGameEventApi NegativeGameEventApi
@*  @attribute [Authorize(Roles = "Admin")]
*@


<style>
    body {
        background-image: url(../images/backgrounds/wallpaper2.png);
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>

<div class="container">
    <EditForm Model="NegativeGameEventResult" OnValidSubmit="HandleCreateUpdate" class="p-3 mt-3">
        <DataAnnotationsValidator />
        <ValidationMessage For="() => NegativeGameEventResult.Name" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                Name
            </label>
            <InputText class="form-control" @bind-Value="NegativeGameEventResult.Name" placeholder="name" />
        </div>
        <ValidationMessage For="() => NegativeGameEventResult.Description" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                Description
            </label>
            <InputText class="form-control" @bind-Value="NegativeGameEventResult.Description" placeholder="Description" />
        </div>
        <ValidationMessage For="() => NegativeGameEventResult.DefenseWithArmorDescription" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                DefenseWithGearDescription
            </label>
            <InputText class="form-control" @bind-Value="NegativeGameEventResult.DefenseWithArmorDescription" placeholder="DefenseWithGearDescription" />
        </div>
        <ValidationMessage For="() => NegativeGameEventResult.DefenseWithoutArmorDescription" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                DefenseWithoutGearDescription
            </label>
            <InputText class="form-control" @bind-Value="NegativeGameEventResult.DefenseWithoutArmorDescription" placeholder="DefenseWithoutGearDescription" />
        </div>
        <ValidationMessage For="() => NegativeGameEventResult.DefenseLoss" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                DefenseLoss
            </label>
            <InputNumber class="form-control" @bind-Value="NegativeGameEventResult.DefenseLoss" placeholder="DefenseLoss" />
        </div>
        <ValidationMessage For="() => NegativeGameEventResult.Probability" />
        <div class="d-flex flex-row mb-2">
            <label class="col-sm-2 col-form-label">
                Probability
            </label>
            <InputNumber class="form-control" @bind-Value="NegativeGameEventResult.Probability" placeholder="Probability" />
        </div>
        <div class="d-flex flex-row align-items-center">
            <button type="submit" class="btn change-item-btn bg-black border-white primary-color rounded-pill">
                <i class="fa-solid fa-person-circle-check"></i>
                @Title
            </button>
            <a href="/negativegameventadmin" class="btn mb-2 ms-2 cancel-item-btn rounded-pill mt-2">
                <i class="fa-solid fa-ban"></i>
                CANCEL
            </a>
        </div>
    </EditForm>
</div>

  @code {
      [Parameter]
    public int? Id { get; set; }

    private string Title { get; set; } = "CREATE";

    private NegativeGameEventResult NegativeGameEventResult { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "UPDATE";
            var result = await NegativeGameEventApi.GetAsync(Id.Value);
            NegativeGameEventResult = result.Data;
        }
        await base.OnInitializedAsync();
    }

    private async Task HandleCreateUpdate()
    {
        if (NegativeGameEventResult.Id != null && Title == "UPDATE")
        {
            await NegativeGameEventApi.Update(NegativeGameEventResult.Id, NegativeGameEventResult);
        }
        else
        {
            await NegativeGameEventApi.Create(NegativeGameEventResult);
        }

        NavigationManager.NavigateTo("/negativegameventadmin");
    }
  }