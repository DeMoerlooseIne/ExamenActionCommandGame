@page "/players"
@inject IPlayerApi PlayerApi
@inject ILocalStorageService StorageService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ClaimsPrincipal User

@using ActionCommandGame.BlazorApp.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

<style>
    body {
        background-image: url(../images/backgrounds/wallpaper5.png);
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>

<div class="d-flex min-vh-100 position-relative w-100 players-background justify-content-center align-items-center">
    <audio id="player">
        <source id="playerSource" src="" />
    </audio>
    <div class="top-0 position-absolute end-0">
        
   @if (User.IsInRole("Admin"))
        {
        <a class="btn btn-sm logout-btn fw-bolder border-white primary-color me-3 mt-3 rounded-pill" href="ItemAdmin">Item Admin</a>
        <a class="btn btn-sm logout-btn fw-bolder border-white primary-color me-3 mt-3 rounded-pill" href="positivegameventadmin">Positive Events Admin</a>
        <a class="btn btn-sm logout-btn fw-bolder border-white primary-color me-3 mt-3 rounded-pill" href="negativegameventadmin">Negative Events Admin</a>
        }

        <button @onclick="Logout" class="btn logout-btn fw-bolder border-white primary-color me-3 mt-3 rounded-pill">
            LOGOUT
            <i class="fa-solid fa-person-walking-arrow-right"></i>
        </button>*
    </div>
    <div class="container">
        <div class="row">
            @if (PlayersResult is null)
            {
                <p>Loading....</p>
            }
            else
            {
                <h1 class="primary-color">Select Your Player</h1>
                <div class="d-flex flex-row mb-3">
                    <h3 class="primary-color">Or <a href="/create" class="btn change-player-btn border-white primary-color rounded-pill create-btn">Create</a> A New One</h3>

                </div>

                @foreach (var player in PlayersResult)
                {
                    <div class="col-12 col-sm-6 col-lg-5 col-xl-2 mb-3 player-card">
                        <PlayerCardComponent IsDeleted="LoadPlayers" Player="player"></PlayerCardComponent>
                    </div>
                }
            }
        </div>
    </div>
</div>


@code
{
    private IList<PlayerResult>? PlayersResult { get; set; } = new List<PlayerResult>();
    private PlayerFilter? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
        await base.OnInitializedAsync();
        await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/ricksongs/Get Schwifty.mp3");
    }

    private async Task LoadPlayers()
    {
        Filter = new PlayerFilter { FilterUserPlayers = true };
        var players = await PlayerApi.Find(Filter);
        PlayersResult = players.Data;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/ricksounds/its-time-to-go-back-to-our-lives.mp3");
        await Task.Delay(1600);
        NavigationManager.NavigateTo("/");
    }
}

