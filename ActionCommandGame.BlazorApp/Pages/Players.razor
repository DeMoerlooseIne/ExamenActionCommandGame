@page "/players"
@inject IPlayerApi PlayerApi
@inject ILocalStorageService StorageService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@*@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ClaimsPrincipal User*@


<style>
    body {
        background-image: url(../images/backgrounds/wallpaper5.png);
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>

<div class="d-flex min-vh-100 position-relative w-100 players-background justify-content-center align-items-center">
    <audio id="player">
        <source id="playerSource" src="" />
    </audio>
    <div class="top-0 position-absolute end-0">

   @*     @if (User.IsInRole("Admin"))
        {*@
        <a href="ItemAdmin">
            <img class="btn itemadmin-btn-image change-player-btn" src="images/buttons/items.png" />
        </a>
        <a href="positivegameventadmin">
            <img class="btn pos-btn-image change-player-btn" src="images/buttons/thumbsup.png" />
        </a>
        <a href="negativegameventadmin">
            <img class="btn neg-btn-image change-player-btn" src="images/buttons/thumbsdown.png" />
        </a>
       @* }*@
        <audio id="player">
            <source id="playerSource" src="" />
        </audio>
        <a @onclick="Logout">
            <img class="btn logout-btn-image logout-btn" src="images/buttons/logout.png" />
        </a>
    </div>
    <div class="container">
        <div class="row">
            @if (PlayersResult is null)
            {
                <p>Loading....</p>
            }
            else
            {
                <h1 class="primary-color player-title">Select Your Player</h1>
                <div class="d-flex flex-row mb-3">
                    <h3 class="primary-color player-title">Or <a href="/create" class="btn change-player-btn border-white primary-color rounded-pill create-btn player-title">Create</a> A New One</h3>

                </div>

                @foreach (var player in PlayersResult)
                {
                    <div class="col-12 col-sm-6 col-lg-5 col-xl-2 mb-3 player-card">
                        <PlayerComponent IsDeleted="LoadPlayers" Player="player"></PlayerComponent>
                    </div>
                }
            }
        </div>
    </div>
</div>


@code
{
    private IList<PlayerResult>? PlayersResult { get; set; } = new List<PlayerResult>();
    private PlayerFilter? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
        await base.OnInitializedAsync();
        await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/ricksongs/Get Schwifty.mp3");
    }

    private async Task LoadPlayers()
    {
        Filter = new PlayerFilter { FilterUserPlayers = true };
        var players = await PlayerApi.Find(Filter);
        PlayersResult = players.Data;
        StateHasChanged();

        //if (!players.Data.Any())
        //{
        //    await LoadDefaultPlayers();
        //    players = await PlayerApi.Find(Filter);
        //    StateHasChanged();
        //}
    }

    private async Task Logout()
    {
        await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/ricksounds/its-time-to-go-back-to-our-lives.mp3");
        await Task.Delay(1600);
        NavigationManager.NavigateTo("/");
    }

    //private async Task LoadDefaultPlayers()
    //{
    //    var Rick = new PlayerResult
    //        {
    //            Name = "Rick Sanchez",
    //            Money = 5000,
    //            Experience = 70,
    //            ImageName = "Rick_Sanchez.png"
    //        };
    //    var Morty = new PlayerResult
    //        {
    //            Name = "Morty Smith",
    //            Money = 3000,
    //            Experience = 50,
    //            ImageName = "Morty_Smith.png"
    //        };

    //    await PlayerApi.Create(Morty);
    //    await PlayerApi.Create(Rick);
    //}
}

